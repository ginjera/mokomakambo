<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Mokomakambo!</title><link href="http://ginjera.github.io/mokomakambo/" rel="alternate"></link><link href="http://ginjera.github.io/mokomakambo/feeds/blog.atom.xml" rel="self"></link><id>http://ginjera.github.io/mokomakambo/</id><updated>2014-08-20T21:53:00+08:00</updated><entry><title>Searching bash history with ctrl-R</title><link href="http://ginjera.github.io/mokomakambo/bash-history-ctrl-R.html" rel="alternate"></link><updated>2014-08-20T21:53:00+08:00</updated><author><name>ginjera</name></author><id>tag:ginjera.github.io,2014-08-20:mokomakambo/bash-history-ctrl-R.html</id><summary type="html">&lt;p&gt;Wow, bash is cool. A couple of days ago I discovered a simple way to search through bash history by piping the &lt;cite&gt;history&lt;/cite&gt; command through &lt;cite&gt;grep&lt;/cite&gt; for a favourite old command and then follow through with a copy-n-paste. Turns out there's an even simpler way to achieve that. Bash has a built in search function!&lt;/p&gt;
&lt;p&gt;Simply press &lt;cite&gt;ctrl-R&lt;/cite&gt; and start typing the first characters of that command you're looking for. Bash will start matching it with the most recent occurence. Pressing &lt;cite&gt;ctrl-R&lt;/cite&gt; again and bash will scroll backwards to the next most recent one. When you find it, press &lt;cite&gt;Enter&lt;/cite&gt; to re-execute that command or use left- or right-arrow keys to start editing the command.&lt;/p&gt;
&lt;p&gt;Check out this &lt;a class="reference external" href="https://www.digitalocean.com/community/tutorials/how-to-use-bash-history-commands-and-expansions-on-a-linux-vps"&gt;tutorial&lt;/a&gt; courtesy of the folks at Digital Ocean for the full dirt on bash history features.&lt;/p&gt;
&lt;p&gt;Very. Very. Cool.&lt;/p&gt;
</summary><category term="bash"></category></entry><entry><title>Searching bash history</title><link href="http://ginjera.github.io/mokomakambo/bash-history.html" rel="alternate"></link><updated>2014-08-16T21:53:00+08:00</updated><author><name>ginjera</name></author><id>tag:ginjera.github.io,2014-08-16:mokomakambo/bash-history.html</id><summary type="html">&lt;p&gt;Recently I was helping my better half to download megabytes of image files from an ftp site. She was having trouble because the ftp connection kept breaking and messing up her workflow of right-click and downloading individual files in her browser. I got to show off the power of the command line with &lt;cite&gt;wget&lt;/cite&gt; and its powerful features like &lt;cite&gt;--no-clobber&lt;/cite&gt;, &lt;cite&gt;--continue&lt;/cite&gt;, &lt;cite&gt;--read-timeout=*seconds*&lt;/cite&gt;, &lt;cite&gt;--tries=*number*&lt;/cite&gt;, &lt;cite&gt;--recursive&lt;/cite&gt;, &lt;cite&gt;--level=*depth*&lt;/cite&gt;, &lt;cite&gt;--user=*username*&lt;/cite&gt;, and &lt;cite&gt;password=*password*&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;When she made the same request a couple of days later, I wanted to retrieve thos &lt;cite&gt;wget&lt;/cite&gt; commands from bash history to avoid retyping them esp. the long ftp urls.&lt;/p&gt;
&lt;p&gt;Turns out it's pretty simple. Just run history through a grep filter&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;history&lt;/span&gt; | grep wget
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;and out comes a list of commands containing &lt;cite&gt;wget&lt;/cite&gt;.&lt;/p&gt;
&lt;p&gt;From there it was just a simple cut and paste.&lt;/p&gt;
</summary><category term="bash"></category></entry><entry><title>Lexical analysis in pygments</title><link href="http://ginjera.github.io/mokomakambo/pygments-lexer.html" rel="alternate"></link><updated>2014-08-13T21:24:00+08:00</updated><author><name>ginjera</name></author><id>tag:ginjera.github.io,2014-08-13:mokomakambo/pygments-lexer.html</id><summary type="html">&lt;p&gt;Lexicadelicalicious-what?! According to &lt;a class="reference external" href="http://en.wikipedia.org/wiki/Lexical_analysis"&gt;wikipedia, lexical analysis&lt;/a&gt;  is the process of converting a sequence of characters into a sequence of tokens, i.e. meaningful character strings. In the case of pelican, the &lt;a class="reference external" href="http://pygments.org/docs/lexers/"&gt;pygments&lt;/a&gt; module does this job. In restructured text, a &lt;cite&gt;.. code-blocks::&lt;/cite&gt; directive tells pygments what to do:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;code-block&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; lexer

   &amp;lt;bunch of code&amp;gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Trouble is what are the avaiable lexers? Surely there must be a list somewhere. Indeed there is. And we find it at the pygments documentation site. It's a long list. We find languages (&lt;cite&gt;python&lt;/cite&gt;, &lt;cite&gt;ruby&lt;/cite&gt;), markup (&lt;cite&gt;css&lt;/cite&gt;, &lt;cite&gt;html&lt;/cite&gt;), 'non-source code file types' (&lt;cite&gt;latex&lt;/cite&gt;, &lt;cite&gt;yaml&lt;/cite&gt;, &lt;cite&gt;restructuredtext&lt;/cite&gt;) but strangely no &lt;cite&gt;markdown&lt;/cite&gt;. Hmm, I wonder how folks highlight markdown syntax with pygments. Or don't they?&lt;/p&gt;
</summary><category term="pelican"></category><category term="pygments"></category></entry><entry><title>Colour settings for ls command</title><link href="http://ginjera.github.io/mokomakambo/colour-settings-for-the-ls-command.html" rel="alternate"></link><updated>2014-08-11T17:53:00+08:00</updated><author><name>ginjera</name></author><id>tag:ginjera.github.io,2014-08-11:mokomakambo/colour-settings-for-the-ls-command.html</id><summary type="html">&lt;p&gt;I use CentOS 6.5 on my personal laptop. For the longest time, I lived with the awful colour defaults for the ls command. Certain directories default to blue text on green background.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Awful default directory colours" src="http://ginjera.github.io/mokomakambo/images/Awful-default-dir-colour.png" /&gt;
&lt;p class="caption"&gt;Arghh, my eyes! Please sir, it hurts!&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;It occurred to me recently that there must be a text file somewhere that I could tweak to make this more readable.&lt;/p&gt;
&lt;p&gt;Lo and behold, here's the file that does the trick: &lt;tt class="docutils literal"&gt;/etc/DIR_COLORS&lt;/tt&gt;. And there are nice helpful comments, which tell us that we can adjust 3 elements:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# Below are the color init strings for the basic file types. A color init&lt;/span&gt;
&lt;span class="c"&gt;# string consists of one or more of the following numeric codes:&lt;/span&gt;
&lt;span class="c"&gt;# Attribute codes:&lt;/span&gt;
&lt;span class="c"&gt;# 00=none 01=bold 04=underscore 05=blink 07=reverse 08=concealed&lt;/span&gt;
&lt;span class="c"&gt;# Text color codes:&lt;/span&gt;
&lt;span class="c"&gt;# 30=black 31=red 32=green 33=yellow 34=blue 35=magenta 36=cyan 37=white&lt;/span&gt;
&lt;span class="c"&gt;# Background color codes:&lt;/span&gt;
&lt;span class="c"&gt;# 40=black 41=red 42=green 43=yellow 44=blue 45=magenta 46=cyan 47=white&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Scanning through that file, I found the blue (34) on green (42) culprit:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;OTHER_WRITABLE 34;42 &lt;span class="c"&gt;# dir that is other-writable (o+w) and not sticky&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Rather than mess around with &lt;tt class="docutils literal"&gt;/etc/DIR_COLORS&lt;/tt&gt;, I made a copy at &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;~/.dircolors&lt;/span&gt;&lt;/tt&gt; and changed the settings for OTHER_WRITABLE to 01;35:&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;img alt="Bold magenta folders" src="http://ginjera.github.io/mokomakambo/images/Ahh-much-better.png" /&gt;
&lt;p class="caption"&gt;Ahhh, purple folders... exactly what the optometrist ordered&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;For a full list of available colours, this &lt;a class="reference external" href="http://linux-sxs.org/housekeeping/lscolors.html"&gt;site&lt;/a&gt; gives the full low down.&lt;/p&gt;
</summary><category term="ls"></category><category term="bash"></category></entry><entry><title>Inserting images in restructured text</title><link href="http://ginjera.github.io/mokomakambo/inserting-images-in-restructuredtext.html" rel="alternate"></link><updated>2014-08-11T13:03:00+08:00</updated><author><name>ginjera</name></author><id>tag:ginjera.github.io,2014-08-11:mokomakambo/inserting-images-in-restructuredtext.html</id><summary type="html">&lt;p&gt;I was struggling to figure out how to insert an image into a post. The example from the pelican docs simply rendered as text.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;![Alt Text]({filename}/images/han.jpg)
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;Until I realised that the example was for Markdown. I was writing in restructuredtext. The equivalent in restructuredtext is:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;image&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; {filename}/images/han.jpg
   &lt;span class="nc"&gt;:alt:&lt;/span&gt; &lt;span class="nf"&gt;Alt Text&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;p&gt;So there it is.&lt;/p&gt;
</summary><category term="pelican"></category><category term="ReST"></category></entry><entry><title>Hello World</title><link href="http://ginjera.github.io/mokomakambo/hello-world.html" rel="alternate"></link><updated>2014-08-10T23:24:00+08:00</updated><author><name>ginjera</name></author><id>tag:ginjera.github.io,2014-08-10:mokomakambo/hello-world.html</id><summary type="html">&lt;p&gt;Hooray! Got the blog up and running on &lt;a class="reference external" href="https://pages.github.com/"&gt;gh-pages&lt;/a&gt;. My &lt;em&gt;first&lt;/em&gt; post using &lt;a class="reference external" href="http://docs.getpelican.com/en/3.4.0/getting_started.html"&gt;Pelican&lt;/a&gt;! There is much to explore in this world of Pelican, &lt;a class="reference external" href="http://openalea.gforge.inria.fr/doc/openalea/doc/_build/html/source/sphinx/rest_syntax.html"&gt;reST&lt;/a&gt;, and static hosting.&lt;/p&gt;
</summary><category term="pelican"></category></entry></feed>